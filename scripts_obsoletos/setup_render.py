#!/usr/bin/env python3
"""
CONFIGURACI√ìN AUTOM√ÅTICA PARA RENDER
Se ejecuta autom√°ticamente cuando se hace deploy en Render
"""
import os
import sys
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_render_environment():
    """Configurar entorno autom√°ticamente en Render"""
    logger.info("üöÄ CONFIGURACI√ìN AUTOM√ÅTICA PARA RENDER")
    logger.info("=" * 50)
    
    # Verificar si estamos en Render
    if 'RENDER' in os.environ:
        logger.info("üåê Detectado entorno de Render")
        
        # Ejecutar migraciones autom√°ticas
        try:
            from migrations.auto_migrate import AutoMigrationSystem
            migrator = AutoMigrationSystem()
            success = migrator.run_migrations()
            
            if success:
                logger.info("‚úÖ Migraciones aplicadas exitosamente")
            else:
                logger.error("‚ùå Error en migraciones")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå Error ejecutando migraciones: {e}")
            return False
    
    else:
        logger.info("üè† Entorno local detectado")
        # En local, tambi√©n aplicar migraciones para mantener sincron√≠a
        try:
            from migrations.auto_migrate import AutoMigrationSystem
            migrator = AutoMigrationSystem()
            success = migrator.run_migrations()
            
            if success:
                logger.info("‚úÖ Base de datos local sincronizada")
            else:
                logger.error("‚ùå Error sincronizando base de datos local")
        except Exception as e:
            logger.error(f"‚ö†Ô∏è Advertencia en sincronizaci√≥n local: {e}")
    
    return True

if __name__ == "__main__":
    setup_render_environment()